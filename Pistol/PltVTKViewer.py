#!/usr/bin/python
"""\
Orbviewer: plot jaguar orbitals using VTK toolkit and python

Orbviewer reads the *.plt file generated by Jaguar and plots the 
orbitals found therein. It takes the geometry from the *.out file
and thus must be able to find that. For the file 
'orb.01_a03MO.plt' the program first searches for 
'orb.01_a03MO.out', and then searches for 'orb.01.out'.

Options:
-c  #  Set contour value to # (range [0.0001,0.1]).
-b  #  Set background grey-level to # (range [0,1]).
-o  #  Set opacity to # (range [0.2,1]).
-C     View molecule using cylinders rather than ball-and-stick.
-G     Only print geometry, no orbitals.
-L     View molecule using lines.
-V     Dump VRML output of image.

Copyright (c) 2003 Richard P. Muller (rmuller@sandia.gov). All rights
reserved. See the LICENSE file for licensing details.
"""

import sys
from vtk import *
from math import sqrt
from Pistol.Element import color,sym2no,radius
from Pistol.VTK import Scene,vtk_grid_data3
from Pistol.Jaguar import read_output,read_plt

def dist2((x1,y1,z1),(x2,y2,z2)):
    return pow(x1-x2,2)+pow(y1-y2,2)+pow(z1-z2,2)

def length((x,y,z)):
    return sqrt(x*x+y*y+z*z)

def orbviewer(outname,pltname):
    geos = read_output(outname)
    plt = read_plt(pltname)
    
    scene = Scene()

    # Atoms
    geo = geos[-1]
    for atno,xyz in geo:
        r,g,b = color[atno]
        scene.add_sphere(0.3*radius[atno],xyz,(r/255.,g/255.,b/255.))

    # Bonds
    nat = len(geo)
    for i in range(nat):
        atnoi,xyzi = geo[i]
        for j in range(i):
            atnoj,xyzj = geo[j]
            rij2 = dist2(xyzi,xyzj)
            rij20 = 0.25*pow(radius[atnoi]+radius[atnoj],2)
            if rij2 < rij20: scene.add_cylinder(xyzi,xyzj,(0.25,0.25,0.25))

    # Orbitals
    data = vtkFloatArray()
    nx,ny,nz = plt['npts']
    origin = plt['origin']
    xvec = plt['xvec']
    yvec = plt['yvec']
    zvec = plt['zvec']
    grid = plt['grid']
    dx = length(xvec)/(nx-1.)
    dy = length(yvec)/(ny-1.)
    dz = length(zvec)/(nz-1.)
    data = vtk_grid_data3((nx,ny,nz),grid)
    scene.add_grid_data(origin,(nx,ny,nz),(dx,dy,dz),data)
    scene.add_contour(0.1,(0.9,0.9,0),0.75)
    scene.add_contour(-0.1,(0,0.9,0.9),0.75)

    scene.display()
    return

if __name__ == '__main__':
    import getopt
    if len(sys.argv) < 2: print __doc__; sys.exit()

    opts,args = getopt.getopt(sys.argv[1:],'h')

    for opt in opts:
        key,value = opt
        if key == '-h': print __doc__; sys.exit()

    orbviewer(args[0],args[1])

        
